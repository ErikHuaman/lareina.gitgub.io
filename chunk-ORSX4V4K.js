var o=class extends Error{};o.prototype.name="InvalidTokenError";function d(n){return decodeURIComponent(atob(n).replace(/(.)/g,(e,t)=>{let r=t.charCodeAt(0).toString(16).toUpperCase();return r.length<2&&(r="0"+r),"%"+r}))}function l(n){let e=n.replace(/-/g,"+").replace(/_/g,"/");switch(e.length%4){case 0:break;case 2:e+="==";break;case 3:e+="=";break;default:throw new Error("base64 string is not of the correct length")}try{return d(e)}catch{return atob(e)}}function a(n,e){if(typeof n!="string")throw new o("Invalid token specified: must be a string");e||(e={});let t=e.header===!0?0:1,r=n.split(".")[t];if(typeof r!="string")throw new o(`Invalid token specified: missing part #${t+1}`);let s;try{s=l(r)}catch(i){throw new o(`Invalid token specified: invalid base64 for part #${t+1} (${i.message})`)}try{return JSON.parse(s)}catch(i){throw new o(`Invalid token specified: invalid json for part #${t+1} (${i.message})`)}}var c=class{static validateModule(e){let t=this.permissions.find(r=>r.url===e);return t?Object.keys(t).filter(r=>r!="url").some(r=>t[r]):!1}static decodeToken(e){return a(e)}static get isLoggedIn(){let e=this.token;if(!e)return!1;let t=this.decodeToken(e);if(t.exp===void 0)return!1;let r=new Date(0);return r.setUTCSeconds(t.exp),new Date().valueOf()<r.valueOf()}static set token(e){localStorage.setItem("token",JSON.stringify(e))}static get token(){return JSON.parse(localStorage.getItem("token")??"null")}static get current(){let{name:e,username:t,id:r,role:s}=this.decodeToken(this.token);return{name:e,username:t,id:r,role:s.name}}static get role(){let{id:e,code:t,name:r}=this.decodeToken(this.token)?.role;return{id:e,code:t,name:r}}static get permissions(){return this.decodeToken(this.token)?.permissions??[]}static accessModule(e){return this.permissions.find(t=>t.url===e)}};export{c as a};
